import torch
import torch.nn as nn
import torch.optim as optim
from sklearn.model_selection import KFold
from torch.optim.lr_scheduler import StepLR
from torchvision import transforms
from torch.utils.data import Dataset
from torchvision import datasets
from torchvision import models

#device=torch.device("cuda")

torch.cuda.empty_cache()

# 定义交叉验证参数
batch_size =64
# 文件路径
data_dir="HuSHem"


# 定义数据转换
transform = transforms.Compose([
    transforms.Resize((224, 224)),
    transforms.ToTensor(),
    transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225]),
])
# 创建 ImageFolder 数据集实例
dataset = datasets.ImageFolder(root=data_dir, transform=transform)

test_loader = torch.utils.data.DataLoader(dataset, batch_size=batch_size)

net = models.vgg16()
net.classifier[0]=nn.Flatten()
net.classifier[1]=nn.Sequential(
    nn.Linear(25088,128),
    nn.ReLU(inplace=True)
)
net.classifier[2]=nn.Dropout(0.4)
net.classifier[3]=nn.Sequential(
    nn.Linear(128,128),
    nn.ReLU(inplace=True)
)
net.classifier[4]=nn.Dropout(0.4)
net.classifier[5]=nn.Sequential(
    nn.Linear(128,4),
    nn.Softmax(dim=1)
)
del net.classifier[6]
dict=torch.load("vGG16_method100.0.pth")
net.load_state_dict(dict)
net=net.cuda()
correct=0
total=0
with torch.no_grad():
    for data in test_loader:
        images, labels = data
        images=images.cuda()
        labels=labels.cuda()
        outputs = net(images)
        _, predicted = torch.max(outputs.data, 1)
        total += labels.size(0)
        correct += (predicted == labels).sum().item()

    accuracy = 100 * correct / total
    print('test Accuracy: %d %%' % (accuracy))
    
